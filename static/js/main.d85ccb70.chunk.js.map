{"version":3,"sources":["components/jumbotron/styles/jumbotron.ts","components/jumbotron/index.tsx","components/footer/styles/footer.ts","components/footer/index.tsx","containers/jumbotron.tsx","containers/footer.tsx","App.tsx","serviceWorker.ts","global-styles.ts","index.tsx"],"names":["Item","styled","div","Inner","direction","Container","Pane","Title","h1","SubTitle","h2","Image","img","Jumbotron","children","directtion","src","alt","Row","Column","Link","a","p","Text","Break","Footer","href","JumbotronContainer","jumboData","map","item","key","id","title","subTitle","process","image","App","Boolean","window","location","hostname","match","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d85ccb70.chunk.js","sourcesContent":["import styled from 'styled-components/macro';\n\ninterface InnerProps {\n    direction: string;\n}\n\nexport const Item = styled.div`\n    display: flex;\n    border-bottom: 8px solid #222;\n    padding: 50px 5%;\n    color: white;\n    overflow: hidden;\n`;\n\nexport const Inner = styled.div<InnerProps>`\n    display: flex;\n    align-items: center;\n    flex-direction: ${({ direction }) => direction};\n    justify-content: space-between;\n    max-width: 1100px;\n    margin: auto;\n    width: 100%;\n\n    @media (max-width: 1000px) {\n        flex-direction: column;\n    }\n`;\n\nexport const Container = styled.div`\n    @media (max-width: 1000px) {\n        ${Item}:last-of-type h2 {\n            margin-bottom: 50px;\n        }\n    }\n`;\n\nexport const Pane = styled.div`\n    width: 50%;\n\n    @media (max-width: 1000px) {\n        width: 100%;\n        padding: 0 45px;\n        text-align: center;\n    }\n`;\n\nexport const Title = styled.h1`\n    font-size: 50px;\n    line-height: 1.1;\n    margin-bottom: 8px;\n\n    @media (max-width: 600px) {\n        font-size: 35px;\n    }\n`;\n\nexport const SubTitle = styled.h2`\n    font-size: 26px;\n    font-weight: normal;\n    line-height: normal;\n\n    @media (max-width: 600px) {\n        font-size: 18px;\n    }\n`;\n\nexport const Image = styled.img`\n    max-width: 100%;\n    width: auto;\n`;","import React, { FC, ReactNode } from 'react';\nimport { Inner, Container, Item, Pane, Title, SubTitle, Image } from './styles/jumbotron';\n\ninterface ContainerProps {\n    children: ReactNode;\n}\n\ninterface PaneProps {\n    children: ReactNode;\n}\n\ninterface TitleProps {\n    children: ReactNode;\n}\n\ninterface SubTitleProps {\n    children: ReactNode;\n}\n\ninterface ImageProps {\n    src: string;\n    alt: string;\n}\n\ninterface Props {\n    children: ReactNode;\n    directtion?: string;\n}\n\ninterface TCompound {\n    Container: FC<ContainerProps>;\n    Pane: FC<PaneProps>;\n    Title: FC<TitleProps>;\n    SubTitle: FC<SubTitleProps>;\n    Image: FC<ImageProps>;\n}\n\nconst Jumbotron: FC<Props> & TCompound = ({ children, directtion = \"row\" }) => {\n    return (\n        <Item>\n            <Inner direction={directtion}>{children}</Inner>\n        </Item>\n    )\n}\n\nJumbotron.Container = ({ children }) => <Container>{children}</Container>\n\nJumbotron.Pane = ({ children }) => <Pane>{children}</Pane>\n\nJumbotron.Title = ({ children }) => <Title>{children}</Title>\n\nJumbotron.SubTitle = ({ children }) => <SubTitle>{children}</SubTitle>\n\nJumbotron.Image = ({ src, alt }) => <Image src={src} alt={alt} />\n\nexport default Jumbotron;","import styled from 'styled-components/macro';\n\nexport const Container = styled.div`\n    display: flex;\n    padding: 70px 56px;\n    margin: auto;\n    max-width: 1000px;\n    flex-direction: column;\n\n    @media (max-width: 1000px) {\n        padding: 70px 30px;\n    }\n`;\n\nexport const Row = styled.div`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(210px, 1fr));\n    grid-gap: 15px;\n\n    @media (max-width: 1000px) {\n        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n    }\n`;\n\nexport const Column = styled.div`\n    display: flex;\n    flex-direction: column;\n    text-align: left;\n`;\n\nexport const Link = styled.a`\n    color: #757575;\n    margin-bottom: 20px;\n    font-size: 14px;\n    text-decoration: none;\n`;\n\nexport const Title = styled.p`\n    color: #757575;\n    margin-bottom: 40px;\n    font-size: 16px;\n`;\n\nexport const Text = styled.div`\n    color: #757575;\n    margin-bottom: 40px;\n    font-size: 13px;\n`;\n\nexport const Break = styled.div`\n    flex-basis: 100%;\n    height: 0;\n`;","import React, { FC, ReactNode } from 'react';\nimport { Container, Row, Column, Link, Title, Text, Break } from './styles/footer';\n\ninterface RowProps {\n    children: ReactNode;\n}\n\ninterface ColumnProps {\n    children: ReactNode;\n}\n\ninterface LinkProps {\n    children: ReactNode;\n    href: string;\n}\n\ninterface TitleProps {\n    children: ReactNode;\n}\n\ninterface TextProps {\n    children: ReactNode;\n}\n\ninterface Props {\n    children: ReactNode;\n    directtion?: string;\n}\n\ninterface TCompound {\n    Row: FC<RowProps>;\n    Column: FC<ColumnProps>;\n    Link: FC<LinkProps>;\n    Title: FC<TitleProps>;\n    Text: FC<TextProps>;\n    Break: FC;\n}\n\nconst Footer: FC<Props> & TCompound = ({ children }) => {\n    return (\n        <Container>{children}</Container>\n    )\n}\n\nFooter.Row = ({ children }) => <Row>{children}</Row>\n\nFooter.Column = ({ children }) => <Column>{children}</Column>\n\nFooter.Link = ({ children, href }) => <Link href={href}>{children}</Link>\n\nFooter.Title = ({ children }) => <Title>{children}</Title>\n\nFooter.Text = ({ children }) => <Text>{children}</Text>\n\nFooter.Break = () => <Break />\n\nexport default Footer;","import React from 'react';\nimport jumboData from '../fixtures/jumbo.json';\nimport { Jumbotron } from '../components';\n\nconst JumbotronContainer = () => {\n  return (\n    <Jumbotron.Container>\n      {jumboData.map((item) => {\n        return (\n          <Jumbotron key={item.id} directtion={item.direction}>\n            <Jumbotron.Pane>\n              <Jumbotron.Title>{item.title}</Jumbotron.Title>\n              <Jumbotron.SubTitle>{item.subTitle}</Jumbotron.SubTitle>\n            </Jumbotron.Pane>\n            <Jumbotron.Pane>\n              <Jumbotron.Image src={`${process.env.PUBLIC_URL}${item.image}`} alt={item.alt} />\n            </Jumbotron.Pane>\n          </Jumbotron>\n        )\n      })}\n    </Jumbotron.Container>\n  );\n}\n\nexport default JumbotronContainer;\n","import React from 'react';\nimport { Footer } from '../components';\n\nexport default () => {\n    return (\n        <Footer>\n            <Footer.Title>Questions? Contact us.</Footer.Title>\n            <Footer.Break />\n            <Footer.Row>\n                <Footer.Column>\n                    <Footer.Link href=\"#\">FAQ</Footer.Link>\n                    <Footer.Link href=\"#\">Investor Relations</Footer.Link>\n                    <Footer.Link href=\"#\">Ways to Watch</Footer.Link>\n                    <Footer.Link href=\"#\">Coporate Information</Footer.Link>\n                    <Footer.Link href=\"#\">Netflix Originals</Footer.Link>\n                </Footer.Column>\n\n                <Footer.Column>\n                    <Footer.Link href=\"#\">Help Centre</Footer.Link>\n                    <Footer.Link href=\"#\">Jobs</Footer.Link>\n                    <Footer.Link href=\"#\">Terms of Use</Footer.Link>\n                    <Footer.Link href=\"#\">Contact Us</Footer.Link>\n                </Footer.Column>\n\n                <Footer.Column>\n                    <Footer.Link href=\"#\">Account</Footer.Link>\n                    <Footer.Link href=\"#\">Redeem Gift Cards</Footer.Link>\n                    <Footer.Link href=\"#\">Privacy</Footer.Link>\n                    <Footer.Link href=\"#\">Speed Test</Footer.Link>\n                </Footer.Column>\n\n                <Footer.Column>\n                    <Footer.Link href=\"#\">Media Centre</Footer.Link>\n                    <Footer.Link href=\"#\">Buy Gift Cards</Footer.Link>\n                    <Footer.Link href=\"#\">Cookuie Preferences</Footer.Link>\n                    <Footer.Link href=\"#\">Legal Notices</Footer.Link>\n                </Footer.Column>\n            </Footer.Row>\n            <Footer.Break />\n            <Footer.Text>Netflix United Kingdom</Footer.Text>\n        </Footer>\n    )\n}","import React from 'react';\nimport { Jumbotron, Footer } from './containers';\n\n\nfunction App() {\n  return (\n    <div>\n      <Jumbotron />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n    html, body {\n        font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        background-color: black;\n        color: #333333;\n    }\n`;\n\nexport {}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport GlobalStyles from './global-styles';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}